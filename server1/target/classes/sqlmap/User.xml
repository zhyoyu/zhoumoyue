<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理 -->
<mapper namespace="test">
    <!-- 在映射文件中配置很多sql语句 -->
    <!-- 通过select执行数据库查询, id:标识映射文件中的sql，
    将sql语句封装到mappedStatement对象中，所以将id称为statement的id
    parameterType: 指定输入参数的类型，这里指定int型
    #{}表示一个占位符
    #{id}:其中的id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意
    resultType:指定sql输出结果所映射的java对象类型，select指定resultType表示将单条记录映射成java对象
     -->
    <select id="findUserById" parameterType="int" resultType="po.User">
        SELECT * FROM USER WHERE id=#{id}
    </select>

    <!-- 根据用户名称模糊查询用户信息，可能返回多条
    resultType:指定就是单条记录所映射的java对象类型
    ${}:表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中
    使用${}拼接sql，引起sql注入
    ${value}:接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="po.User">
        select * from user where username like '%${value}%'
    </select>

    <!-- 添加用户
    parameterType:指定输入参数类型是pojo（包括 用户信息）
    #{}中指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="po.User">
    <!--
    将插入数据的主键返回，返回到user对象中

    SELECT LAST_INSERT_ID()：得到刚insert进去的主键值，只适用于自增主键
    keyProperty:将查询到主键值设置到parameterType指定的对象的哪个属性
    order:SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
    -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        <!--
        使用mysql的uuid()生成主键
        执行过程：
        首先通过uuid（）得到主键，将主键设置到user对象的id属性
        其次在insert执行时，从user对象中取出id属性值
        -->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">-->
            <!--SELECT uuid()-->
        <!--</selectKey>-->
        insert into user(username, birthday, sex, address) value(#{userName},#{birthday},#{sex},#{address})
    </insert>

    <!-- 删除用户
    根据id删除用户，需要输入id值
     -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id=#{id}
    </delete>

    <!-- 更新用户
    需要传入用户id
    需要传入用户的更新信息
    #{id}：从输入user对象中获取id属性值
    -->
    <update id="updateUser" parameterType="po.User">
        update user set username=#{userName},birthday=#{birthday}, sex=#{sex},address=#{address} where id=#{id}
    </update>
</mapper>